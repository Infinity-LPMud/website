---
import "../../styles/global.css";
import Navbar from "../components/Navbar.astro";
import SEOHead from "../components/SEOHead.astro";
interface Props {
  title?: string;
}
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- <link
      href="https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Caveat:wght@400..700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=IM+Fell+English:ital@0;1&display=swap"
      rel="stylesheet"
    /> -->
    <link
      rel="preload"
      fetchpriority="high"
      as="image"
      href="/assets/paper-bg2.webp"
      type="image/webp"
    />
    <link
      rel="preload"
      fetchpriority="high"
      as="image"
      href="/assets/nav-bg.webp"
      type="image/webp"
    />
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Caveat:wght@400..700&family=IM+Fell+English:ital@0;1&family=MedievalSharp&display=swap");
    </style>
    <SEOHead title={title} />
  </head>
  <body class="bg-backgroundColor min-h-screen">
    <Navbar />
    <main class="bg-paper-bg min-h-screen bg-opacity-75">
      <div class="relative pt-28 mx-2 px-6 md:px-1 text-sm">
        <slot />
      </div>
    </main>

    <script>
      const toggleButton = document.querySelector<HTMLButtonElement>(
        '[data-collapse-toggle="navbar-cta"]'
      );

      if (toggleButton) {
        toggleButton.addEventListener("click", () => {
          const targetId = toggleButton.dataset.collapseToggle as string;
          const targetElement = document.getElementById(
            targetId
          ) as HTMLElement;

          if (targetElement) {
            const isHidden = targetElement.classList.contains("hidden");
            targetElement.classList.toggle("hidden");
            toggleButton.setAttribute(
              "aria-expanded",
              isHidden ? "false" : "true"
            );
          }
        });
      }

      function toggleHamburgerAriaHidden() {
        const hamburgerElement = document.getElementById("hamburger");

        if (hamburgerElement instanceof SVGElement) {
          const hamburgerSvg = hamburgerElement as SVGElement;
          hamburgerSvg.setAttribute(
            "aria-hidden",
            window.innerWidth < 768 ? "false" : "true"
          );
        } else {
          console.error('Element with ID "hamburger" is not an SVG element.');
        }
      }

      window.addEventListener("resize", toggleHamburgerAriaHidden);
      toggleHamburgerAriaHidden(); // Call immediately to set initial state
    </script>
  </body>
</html>
